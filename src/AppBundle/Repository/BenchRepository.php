<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Bench;
use AppBundle\Util\TimeHelper;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\QueryException;

/**
 * BenchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BenchRepository extends EntityRepository
{
    public function getAdminListQuery()
    {
        return $this->createQueryBuilder('b')
            ->getQuery();
    }

    /**
     * @return int
     */
    public function findTotalCount()
    {
        try {
            return $this->createQueryBuilder('b')
                ->select('COUNT(b)')
                ->getQuery()
                ->getSingleScalarResult();
        } catch (QueryException $e) {
            return 0;
        }
    }

    /**
     * @param Bench $bench
     * @param $date
     * @return Bench[]
     */
    public function getFreeBenchForDate($bench, $date)
    {
        return $this->findFreeBenchForDate($bench, $date)
            ->getQuery()
            ->execute();
    }

    /**
     * @param $date
     * @return Bench[]
     */
    public function getBusyBenchForDate($date)
    {
        $dates = TimeHelper::getOneDayShift($date);

        /** @var Bench[] $reservedBench */
        $reservedBench = $this->createQueryBuilder('b')
            ->leftJoin('b.reservations', 'r')
            ->andWhere('r.date >= :start')
            ->andWhere('r.date < :end')
            ->andWhere('r.state = :state')
            ->setParameter('state', true)
            ->setParameter('start', $dates->start)
            ->setParameter('end', $dates->end)
            ->getQuery()
            ->execute();

        return $this->createQueryBuilder('b')
            ->andWhere('b IN (:reserved)')
            ->setParameter('reserved', $reservedBench)
            ->getQuery()
            ->execute();
    }

    /**
     * @param Bench $bench
     * @param $date
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findFreeBenchForDate($bench, $date)
    {
        $dates = TimeHelper::getOneDayShift($date);

        /** @var Bench[] $reservedBench */
        $reservedBenchQuery = $this->createQueryBuilder('b')
            ->leftJoin('b.reservations', 'r')
            ->andWhere('r.date >= :start')
            ->andWhere('r.date < :end')
            ->andWhere('r.state = :state')
            ->setParameter('state', true)
            ->setParameter('start', $dates->start)
            ->setParameter('end', $dates->end);

        if ($bench) {
            $reservedBenchQuery->andWhere('b != :selectedBench')
                ->setParameter('selectedBench', $bench);
        }

        $reservedBench = $reservedBenchQuery
            ->getQuery()
            ->execute();

        if (count($reservedBench) == 0) {
            return $this->createQueryBuilder('b');
        }

        return $this->createQueryBuilder('b')
            ->andWhere('b NOT IN (:reserved)')
            ->setParameter('reserved', $reservedBench);
    }
}
